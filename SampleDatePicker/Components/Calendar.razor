@namespace SampleDatePicker.Components 

<div class="grid grid-cols-7 gap-2">
    @foreach (var day in DaysOfWeek)
    {
        <div class="text-center font-semibold">@day</div>
    }

    @foreach (var day in DaysInMonth)
    {
        <div>             
            <button @onclick="() => SelectDate(day.Date)" class="text-center rounded-md flex w-full justify-center @GetDayClasses(day)">@day.Day</button>
        </div>
    }
</div>

@code {
    [Parameter] public DateTime CurrentMonth { get; set; }
    [Parameter] public int CurrentYear { get; set; }

    [Parameter] public DateTime CurrentDate {get;set;}
    [Parameter] public EventCallback<DateTime> OnDateSelected { get; set; }

    private IEnumerable<DateTime> DaysInMonth { get; set; }
    private string[] DaysOfWeek { get; } = new[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

    protected override void OnParametersSet()
    {
        GenerateCalendarDays();
    }

    private void GenerateCalendarDays()
    {
        var firstDayOfMonth = new DateTime(CurrentYear, CurrentMonth.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(CurrentYear, CurrentMonth.Month);

        // Find the first day to display on the calendar (including days from the previous month)
        var firstDayToDisplay = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);

        DaysInMonth = Enumerable.Range(0, 42) // 6 weeks, 7 days each
                                .Select(offset => firstDayToDisplay.AddDays(offset))
                                .ToList();
    }

    private string GetDayClasses(DateTime day)
    {
        var classes = "";

        if(day.Date == CurrentDate.Date)
        {
            classes += " border-2 border-grey-500 bg-gray-500 text-white";
        }
        else if (day.Month != CurrentMonth.Month)
        {
            classes += " bg-white text-gray-200";
        }
        else if (day.Date == DateTime.Today)
        {
            classes += " border-2 border-blue-500 bg-blue-500 text-white";
        }
        else
        {
            classes += " text-gray-900 hover:bg-gray-200 transition duration-150 ease-in-out";
        }

        return classes;
    }

    private void SelectDate(DateTime date)
    {
        Console.WriteLine($"SelectDate did this even get called!! {date.Day} {date.Month} {date.Year}");
        OnDateSelected.InvokeAsync(date);
    }
}