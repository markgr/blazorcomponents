@using System.Globalization
@using System.Linq.Expressions

@namespace SampleDatePicker.Components

@inject IJSRuntime JS

<div class="relative inline-block w-96" @onfocusout="HandleFocusOut" @ref="datePickerElement">
    <InputText @bind-Value="SelectedDateString" @onfocus="ShowCurrentPicker" class="w-full px-3 py-2 text-lg border border-gray-300 rounded-md" />
    <button @onclick="ToggleCalendar" class="absolute top-1/2 right-3 transform -translate-y-1/2 bg-transparent border-none cursor-pointer text-xl">📅</button>

    @if (IsCalendarVisible)
    {
        <div class="absolute left-0 w-full p-3 mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-50">
            <MonthYearNavigation CurrentMonth="CurrentMonth"
                                 CurrentYear="CurrentYear"
                                 StartYear="1900"
                                 EndYear="2100"
                                 OnMonthChanged="OnMonthChanged"
                                 OnYearChanged="OnYearChanged" />

            <Calendar CurrentMonth="CurrentMonth"
                      CurrentYear="CurrentYear"
                      CurrentDate="SelectedDate ?? DateTime.Now"
                      OnDateSelected="OnDateSelected" />
        </div>
    }
    else if(IsPresetVisible)
    {
        <div class="absolute left-0 w-full p-3 mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-50 min-h-48">
            <PresetList OnPresetSelected="SelectPreset" OnIconSelected="SelectCalendarIcon" Presets="Presets" ShowCalendarIcon="PickerMode == DatePickerMode.PresetOnly ? false : true" />
        </div>
    }
</div>

@code {
    [Parameter]
    public DateTime StartDate {get;set;} = DateTime.Now;

    [Parameter]
    public DatePickerMode PickerMode { get; set; } = DatePickerMode.OnlyDate;

    private ElementReference datePickerElement;
    private bool IsCalendarVisible { get; set; }
    private bool IsPresetVisible { get; set; }
    private DateTime CurrentMonth { get; set; } = DateTime.Now;
    private int CurrentYear { get; set; } = DateTime.Now.Year;
    private List<string> SelectableStrings = new List<string> { "Option 1", "Option 2", "Option 3", "Option 4", "Option 5" };
    private List<DateTimePreset> Presets = new();
    private CurrentPickerMode _currentPickerMode = CurrentPickerMode.Calendar;

    protected override void OnInitialized()
    {
        Presets.Add(new DateTimePreset("7 days ago", d => DateTime.Now - TimeSpan.FromDays(7)));
        Presets.Add(new DateTimePreset("14 days ago", d => DateTime.Now - TimeSpan.FromDays(14)));
        Presets.Add(new DateTimePreset("1st of month", d => new DateTime(d.Year, d.Month, 1)));

        if(SelectedDate is null)
        {
            SelectedDate = StartDate; 
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (PickerMode == DatePickerMode.OnlyDate || PickerMode == DatePickerMode.PresetThenDate)
        {
            _currentPickerMode = CurrentPickerMode.Calendar;
        }
        else
        {
            _currentPickerMode = CurrentPickerMode.Preset;
        }
    }


    private DateTime? SelectedDate { get; set; }

    private string SelectedDateString
    {
        get => SelectedDate.HasValue ? SelectedDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : string.Empty;
        set
        {
            if (DateTime.TryParse(value, out var date))
            {
                SelectedDate = date;
                CurrentMonth = new DateTime(date.Year, date.Month, 1);
                CurrentYear = date.Year;
            }
            else
            {
                SelectedDate = null;
            }
        }
    }

    private void HandleBlur(FocusEventArgs e)
    {
        IsCalendarVisible = false;
    }

    private async Task HandleFocusOut(FocusEventArgs e)
    {
        // Delay is necessary to allow the click event to be detected
        await Task.Delay(100);
        if (JS is not null)
        {
            Console.WriteLine($"In HandleFocusOut and datePickerElement = {datePickerElement}");
            var clickedOutside = await JS.InvokeAsync<bool>("checkIfClickedOutside", datePickerElement );
            if (clickedOutside)
            {
                IsCalendarVisible = false;
                IsPresetVisible = false;
            }
        }
    }

    private void ToggleCalendar()
    {
        if (PickerMode == DatePickerMode.OnlyDate || PickerMode == DatePickerMode.PresetOnly && _currentPickerMode == CurrentPickerMode.Calendar)
        {
            IsCalendarVisible = !IsCalendarVisible;
        }
        else if (PickerMode == DatePickerMode.PresetThenDate && _currentPickerMode == CurrentPickerMode.Preset || PickerMode == DatePickerMode.PresetOnly)
        {
            IsPresetVisible = !IsPresetVisible;
        }
    }

    private void ShowCurrentPicker()
    {
        if (PickerMode == DatePickerMode.OnlyDate || PickerMode == DatePickerMode.PresetOnly && _currentPickerMode == CurrentPickerMode.Calendar)
        {
            IsCalendarVisible = true;
        }
        else
        {
            IsPresetVisible = true;
        }
    }

    private void ShowCalendar()
    {
        IsCalendarVisible = true;
    }

    private void ShowPreset()
    {
        IsPresetVisible = true;
    }

    private void OnDateSelected(DateTime date)
    {
        Console.WriteLine($"OnDateSelected has been called with {date.Day} {date.Month} {date.Year}");
        SelectedDate = date;
        SelectedDateString = date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        Console.WriteLine($"SelectedDateString has been called with {SelectedDateString}");        
        IsCalendarVisible = false; // Hide the calendar after selection
    }

    private void OnMonthChanged(int newMonth)
    {
        CurrentMonth = new DateTime(CurrentYear, newMonth, 1);
    }

    private void OnYearChanged(int newYear)
    {
        CurrentYear = newYear;
        CurrentMonth = new DateTime(newYear, CurrentMonth.Month, 1);
    }

    private Task SelectPreset(DateTime dateTime)
    {        
        SelectedDate = dateTime;
        SelectedDateString = dateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);        
        IsPresetVisible = false;
        return Task.CompletedTask;
    }

    private async Task SelectCalendarIcon()
    {
        // Handle calendar icon selection
        IsPresetVisible = false;
        await Task.Delay(250);
        IsCalendarVisible = true;
        _currentPickerMode = CurrentPickerMode.Calendar;
    }
}
